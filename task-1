import re

def assess_password_strength(password):
    # Initialize strength score and feedback list
    strength_score = 0
    feedback = []

    # Criteria 1: Length
    length = len(password)
    if length >= 8:
        strength_score += 2
        feedback.append("Length is sufficient.")
    elif length >= 5:
        strength_score += 1
        feedback.append("Length is moderate, consider using at least 8 characters.")
    else:
        feedback.append("Length is too short, use at least 8 characters.")

    # Criteria 2: Complexity
    if re.search(r'[A-Z]', password):
        strength_score += 1
    else:
        feedback.append("Consider adding uppercase letters.")
    
    if re.search(r'[a-z]', password):
        strength_score += 1
    else:
        feedback.append("Consider adding lowercase letters.")
    
    if re.search(r'[0-9]', password):
        strength_score += 1
    else:
        feedback.append("Consider adding digits.")
    
    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        strength_score += 1
    else:
        feedback.append("Consider adding special characters.")

    # Criteria 3: Uniqueness
    if re.search(r'(.)\1{2,}', password):
        feedback.append("Avoid repeated characters.")
    if re.search(r'(.)\1{4,}', password):
        strength_score -= 1
        feedback.append("Avoid using the same character consecutively.")
    
    # Evaluate the overall strength
    if strength_score >= 6:
        overall_strength = "Strong"
    elif strength_score >= 4:
        overall_strength = "Moderate"
    else:
        overall_strength = "Weak"

    # Provide feedback
    feedback.append(f"Password strength: {overall_strength}")

    return strength_score, feedback

# Test the function
password = input("Enter a password to assess: ")
score, feedback = assess_password_strength(password)
print(f"Password Strength Score: {score}")
print("Feedback:")
for f in feedback:
    print(f" - {f}")
